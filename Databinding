@BindingAdapter
作用于方法
它定义了xml的属性赋值的java实现
方法必须为公共静（public static）方法，可以有一到多个参数。

问题
在使用databinding的时候，有时候发现：

属性在类中没有对应的setter，如ImageView的android:src，ImageView中没有setSrc()方法，
属性在类中有setter，但是接收的参数不是自己想要的，如android:background属性，对应的setter是setBackgound(drawable)，但是我想传一个int类型的id进去，这时候android:background = “@{imageId}”就不行。
没有对应的属性，但是却要实现相应的功能。

这时候可以使用@BindingAdapter来定义方法，解决上面的问题。

for example
java:
@BindingAdapter("background")
    public static void setBackground(Button btn, int id){
        btn.setBackgroundResource(id);
    }
xml:
 app:background="@{img.id}"
实现双向绑定

Observable objects
因为Observable是个接口，Google为我们提供了一个BaseObservable类，我们只要把Model类继承自它就获得了通知UI更新数据的能力了，然后再getter方法上添加Bindable注解，在setter方法中使用notifying提醒UI更新数据。

1、给之前的get方法添加 "@Bindable"注解
2、给之前的set方法的最后边添加"notifyPropertyChanged(BR.字段)"
步骤一的作用就是通过注解的方式，来标记此get属性方法，将来是要自动触发的动作
而步骤二的作用则是，当数据发生变化时，发出此属性已经改变的通知，从而让dataBinding框架去自动调用get方法

ObservableFields
我们刚刚介绍的通知UI更新的方法是用User类继承自BaseObservable，然后在getter上添加注解、在setter中添加notify方法，这感觉总是有点麻烦，步骤繁琐，于是，Google推出ObservableFields类，使用它我们可以简化我们的Model类，如：
public class User{
    public final ObservableField<String> userName = new ObservableField<>();
    public final ObservableField<String> userPassword = new ObservableField<>();
}

当然ObservableField<T>中传入的泛型可以是java中的基本类型，当然我们还可以使用 ObservableBoolean, ObservableByte, ObservableChar, ObservableShort, ObservableInt, ObservableLong, ObservableFloat, ObservableDouble, ObservableParcelable等具体的类型，效果也和ObservableField<T>是一样的

Observable Collections
Google也为我们提供了一些通知类型的集合，有这三种：ObservableArrayList<T>、ObservableArrayMap<K,V>、ObservableMap<K,V>，它和平场使用的List、Map用法一样，但是多了通知功能。 
我们在layout中的<data>区域导入包后就可以直接用它了，当它内部的数据发生改变时就自动会通知UI界面更新。

ViewModel仅仅专注于业务的逻辑处理,只做和业务逻辑和业务数据相关的事，UI相关的事情不要写在这里面，ViewModel 层不会持有任何控件的引用，更不会在ViewModel中通过UI控件的引用去做更新UI的事情。但是ViewModel可能会改变数据，由于数据和UI已经绑定到一起了，所以相应的控件上会自动去更新UI。

Model层
Model层就是职责数据获取的，网络请求的逻辑在这里面写，类似于MVP。所以我觉得ViewModel层可以持有一个Model的引用，通知Model获取数据，同时Model在获取到数据之后，回调通知ViewModel进行数据更改，进而使UI得到更新。

总结一下：View层的Activity通过DataBinding生成Binding实例,把这个实例传递给ViewModel，ViewModel层通过把自身与Binding实例绑定，从而实现View中layout与ViewModel的双向绑定。如果不引入ViewModel这一层，还会有一个缺点：一个xml中可能会涉及到多个数据对象，那么我们只有把这个多个数据对象都引入进来，xml布局的清晰程度下降，通过这种方法，我们的layout文件中data标签中只需要引入ViewModel就可以了，其它的数据对象统一在ViewModel中一并处理。


MVVM的问题
第一点：数据绑定使得 Bug 很难被调试。你看到界面异常了，有可能是你 View 的代码有 Bug，也可能是 Model 的代码有问题。数据绑定使得一个位置的 Bug 被快速传递到别的位置，要定位原始出问题的地方就变得不那么容易了。
第二点：对于过大的项目，数据绑定需要花费更多的内存。



