在项目中使用LiveData，会有以下优点:

确保UI符合数据状态
LiveData遵循观察者模式。 当生命周期状态改变时，LiveData会向Observer发出通知。 您可以把更新UI的代码合并在这些Observer对象中。不必去考虑导致数据变化的各个时机，每次数据有变化，Observer都会去更新UI。
没有内存泄漏
Observer会绑定具有生命周期的对象，并在这个绑定的对象被销毁后自行清理。
不会因停止Activity而发生崩溃
如果Observer的生命周期处于非活跃状态，例如在后退堆栈中的Activity，就不会收到任何LiveData事件的通知。
不需要手动处理生命周期
UI组件只需要去观察相关数据，不需要手动去停止或恢复观察。LiveData会进行自动管理这些事情，因为在观察时，它会感知到相应组件的生命周期变化。
始终保持最新的数据
如果一个对象的生命周期变到非活跃状态，它将在再次变为活跃状态时接收最新的数据。 例如，后台Activity在返回到前台后立即收到最新数据。
正确应对配置更改
如果一个Activity或Fragment由于配置更改（如设备旋转）而重新创建，它会立即收到最新的可用数据。
共享资源
您可以使用单例模式扩展LiveData对象并包装成系统服务，以便在应用程序中进行共享。LiveData对象一旦连接到系统服务，任何需要该资源的Observer都只需观察这个LiveData对象。


LiveData 是一个数据持有者类，它持有一个值并允许观察该值。不同于普通的可观察者，LiveData 遵守应用程序组件的生命周期，以便 Observer 可以指定一个其应该遵守的 Lifecycle。

LiveData实现了对数据的监听，利用这点，我们可以更好的实现获取数据和数据展示解耦。本文着重讲解数据更新和更新UI逻辑分离，LiveData的LifeCycle特性暂不做介绍。

下文用一个简单的例子来介绍如何实现数据更新和UI展示解耦，实现逻辑分离。

UI展示逻辑代码如下：
private MutableLiveData<String> username;

    private TextView tvUsername;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_live_data);

        tvUsername = findViewById(R.id.tv_username);

        username = new MutableLiveData<>();

        username.observe(this, new Observer<String>() {
            @Override
            public void onChanged(@Nullable String s) {
                tvUsername.setText(s);
            }
        });
    }
上面代码对应的布局文件代码如下：

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context="com.ihognqiqu.aac.livedata.LiveDataActivity">

    <TextView
        android:id="@+id/tv_username"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="center"
        android:padding="40dp"
        android:text="Default User Name"
        android:textSize="20dp" />

    <Button
        android:id="@+id/tv_change_username"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="center"
        android:onClick="onClickMainThread"
        android:text="Change User Name main thread" />

    <Button
        android:id="@+id/tv_change_username_background"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="center"
        android:onClick="onClickThread"
        android:text="Change User Name background" />

    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginTop="10dp"
        android:padding="10dp"
        android:text="一个数据持有类，持有数据并且这个数据可以被观察被监听，和其他Observer不同的是，它和Lifecycle是绑定的。"
        android:textColor="@color/colorPrimary"
        android:textSize="17dp" />


</LinearLayout>
从上面代码可以发现，除了基本的初始化操作、设置监听，只剩下UI赋值逻辑。

主线程更新数据代码（点击id为tv_change_username的按钮执行下面的方法）：

/**
  * 主线程中更新数据
  * @param view
  */
 public void onClickMainThread(View view) {
     username.setValue("New User Name by main thread");
 }
子线程更新数据代码如下（点击id为tv_change_username_background的按钮执行下面这个方法）：


/**
  * 子线程中更新数据
  * @param view
  */
 public void onClickThread(View view) {
     new Thread(new Runnable() {
         @Override
         public void run() {
             try {
                 Thread.sleep(2000);
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
             username.postValue("New User Name by background thread");
         }
     }).start();
 }
从上面同步和异步两个方法，可以发现这里只有对数据的更新逻辑，没有任何UI更新的逻辑。

例子很简单，通过使用LiveData，我们实现了业务逻辑和UI更新逻辑分离。通过使用LiveData可以使我们的架构设计更加合理，职责分工更加明确。从小的方面来看，实现了解耦代码分离，从大的方面说，这会改变应用架构设计。
参考地址：https://www.ihongqiqu.com/2017/12/14/Android-LiveData/
